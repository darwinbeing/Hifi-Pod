# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi

#export PATH=/usr/local/ti-sdk-am335x-evm/linux-devkit/bin:$PATH
#export PATH=/usr/local/arm-2011.03/bin:$PATH
#export PATH=/root/myandroid/out/host/linux-x86/bin:$PATH


export JAVA_HOME=/opt/jdk1.6.0_23
export ANDROID_JAVA_HOME=$JAVA_HOME
export PATH=$JAVA_HOME/bin:$PATH
export PATH=$JAVA_HOME/jre/bin:$PATH

export JRE_HOME=$JAVA_HOME/jre

export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH  
export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/bin/tools.jar:$JRE_HOME/bin
export ANDROID_JAVA_HOME=$JAVA_HOME


#export MYANDROID_HOME=$HOME/rowboat-android
#export PATH=$MYANDROID_HOME/out/host/linux-x86/bin:$PATH
#export ANDROID_PRODUCT_OUT=$MYANDROID_HOME/out/target/product/generic/

#export PATH=$MYANDROID_HOME/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin:$PATH
#export PATH=/usr/local/arm-2009q1/bin:$PATH

#export QPEDIR=/usr/local/Trolltech/QtEmbedded-4.8.1-arm
#export QTDIR=/usr/local/Trolltech/QtEmbedded-4.8.1-arm


#export QTDIR=/qtlib                             
#export PATH=$QTDIR/bin:$PATH                                                    
#export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH 

#export QTDIR=/usr/local/ti-sdk-am335x-evm/linux-devkit/arm-arago-linux-gnueabi/usr
#export QTDIR=/usr/local/ti-sdk-am335x-evm/linux-devkit/arm-arago-linux-gnueabi/usr
#export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH 


#export PATH=/usr/local/ti-sdk-am335x-evm/linux-devkit/bin:$PATH
QMAKESPEC=/usr/local/ti-sdk-am335x-evm/linux-devkit/arm-arago-linux-gnueabi/usr/share/qtopia/mkspecs/linux-g++;export QMAKESPEC; # ADDED BY INSTALLER - DO NOT EDIT OR DELETE THIS COMMENT - AB1C36D0-2B62-930A-B1CF-1B15CF69BE47 A9F22FB9-7582-2AC4-F83A-F06FFBA2A22B


###My Environment path for am335x

export SDK_PATH=/usr/local/ti-sdk-am335x-evm/linux-devkit
#export SDK_PATH=/root/qt-everywhere-opensource-src-4.8.2
export TOOLCHAIN_PATH=/usr/local/ti-sdk-am335x-evm/linux-devkit
export TARGET_SYS=arm-arago-linux-gnueabi
export PATH=$SDK_PATH/bin:$TOOLCHAIN_PATH/bin:$PATH
export CPATH=$SDK_PATH/$TARGET_SYS/usr/include:$CPATH
export LIBTOOL_SYSROOT_PATH=$SDK_PATH/$TARGET_SYS
export PKG_CONFIG_SYSROOT_DIR=$SDK_PATH/$TARGET_SYS
export PKG_CONFIG_PATH=$SDK_PATH/$TARGET_SYS/usr/lib/pkgconfig
export CONFIG_SITE=$SDK_PATH/site-config
alias opkg="LD_LIBRARY_PATH=$SDK_PATH/lib $SDK_PATH/bin/opkg-cl -f $SDK_PATH/etc/opkg-sdk.conf -o $SDK_PATH"
alias opkg-target="LD_LIBRARY_PATH=$SDK_PATH/lib $SDK_PATH/bin/opkg-cl -f $SDK_PATH/$TARGET_SYS/etc/opkg.conf -o $SDK_PATH/$TARGET_SYS"
#export CROSS_COMPILE=arm-arago-linux-gnueabi
export CC=arm-arago-linux-gnueabi-gcc
export CPP="arm-arago-linux-gnueabi-gcc -E"
export NM=arm-arago-linux-gnueabi-nm
export RANLIB=arm-arago-linux-gnueabi-ranlib
export OBJCOPY=arm-arago-linux-gnueabi-objcopy
export STRIP=arm-arago-linux-gnueabi-strip
export AS=arm-arago-linux-gnueabi-as
export AR=arm-arago-linux-gnueabi-ar
export OBJDUMP=arm-arago-linux-gnueabi-objdump
export PKG_CONFIG_ALLOW_SYSTEM_LIBS=1
export OE_QMAKE_CC=${TARGET_SYS}-gcc
export OE_QMAKE_CXX=${TARGET_SYS}-g++
export OE_QMAKE_LINK=${TARGET_SYS}-g++
export OE_QMAKE_AR=${TARGET_SYS}-ar
export OE_QMAKE_LIBDIR_QT=${SDK_PATH}/${TARGET_SYS}/usr/lib
export OE_QMAKE_INCDIR_QT=${SDK_PATH}/${TARGET_SYS}/usr/include/qtopia
export OE_QMAKE_MOC=${SDK_PATH}/bin/moc4
export OE_QMAKE_UIC=${SDK_PATH}/bin/uic4
export OE_QMAKE_UIC3=${SDK_PATH}/bin/uic34
export OE_QMAKE_RCC=${SDK_PATH}/bin/rcc4
export OE_QMAKE_QDBUSCPP2XML=${SDK_PATH}/bin/qdbuscpp2xml4
export OE_QMAKE_QDBUSXML2CPP=${SDK_PATH}/bin/qdbusxml2cpp4
export OE_QMAKE_QT_CONFIG=${SDK_PATH}/${TARGET_SYS}/usr/share/qtopia/mkspecs/qconfig.pri
export QMAKESPEC=${SDK_PATH}/${TARGET_SYS}/usr/share/qtopia/mkspecs/linux-g++
export OE_QMAKE_LDFLAGS="-static-libstdc++ -static-libgcc -L${SDK_PATH}/${TARGET_SYS}/usr/lib -Wl,-rpath-link,${SDK_PATH}/${TARGET_SYS}/usr/lib -Wl,-O1 -Wl,--hash-style=gnu"

export LDFLAGS="-static-libgcc -L${SDK_PATH}/${TARGET_SYS}/usr/lib -Wl,-rpath-link,${SDK_PATH}/${TARGET_SYS}/usr/lib -Wl,-O1 -Wl,--hash-style=gnu"

export OE_QMAKE_STRIP="echo"
export PS1="\[\e[32;1m\][linux-devkit]\[\e[0m\]:\w> "

# QTDIR=/root/qt-everywhere-opensource-src-4.8.2
# PATH=$QTDIR/qt/bin:$PATH
# PATH=$QTDIR/bin:$PATH
# MANPATH=$QTDIR/man:$MANPATH
# LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH
# export QTDIR PATH MANPATH LD_LIBRARY_PATH


# export CC=gcc
# export NM=nm
# export RANLIB=ranlib
# export OBJCOPY=objcopy
# export STRIP=strip
# export AS=as
# export AR=ar
# export OBJDUMP=objdump
